// <auto-generated />
using System;
using HocTiengAnh.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HocTiengAnh.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HocTiengAnh.Models.CategoryModel", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<string>("CategoryImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("HocTiengAnh.Models.DTOs.QuizEasy", b =>
                {
                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DictionaryID")
                        .HasColumnType("int");

                    b.Property<byte[]>("DictionaryImageURL")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("DictionaryWord")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("QuizEasies");
                });

            modelBuilder.Entity("HocTiengAnh.Models.DictionaryModel", b =>
                {
                    b.Property<int>("DictionaryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DictionaryID"));

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<byte[]>("DictionaryImageURL")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("DictionaryWord")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DictionaryID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Dictionaries");
                });

            modelBuilder.Entity("HocTiengAnh.Models.GameDetailModel", b =>
                {
                    b.Property<int>("GameID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<int?>("GameScore")
                        .HasColumnType("int");

                    b.HasKey("GameID", "UserID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("UserID");

                    b.ToTable("GameDetails");
                });

            modelBuilder.Entity("HocTiengAnh.Models.GameModel", b =>
                {
                    b.Property<int>("GameID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GameID"));

                    b.Property<bool>("IsNew")
                        .HasColumnType("bit");

                    b.Property<string>("LastTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.HasKey("GameID");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("HocTiengAnh.Models.UserModel", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("HocTiengAnh.Models.DictionaryModel", b =>
                {
                    b.HasOne("HocTiengAnh.Models.CategoryModel", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("HocTiengAnh.Models.GameDetailModel", b =>
                {
                    b.HasOne("HocTiengAnh.Models.CategoryModel", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HocTiengAnh.Models.GameModel", "Game")
                        .WithMany()
                        .HasForeignKey("GameID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HocTiengAnh.Models.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Game");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
